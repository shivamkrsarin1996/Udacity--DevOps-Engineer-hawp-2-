Description: >
  Shivam Sareen- Udacity Project 2 
  This template deploys a VPC,2 public and private subnets along with an Internet Gateway, with a default 
  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ), and default routes for them in the private subnets.


#-------------------------------------------------------
#Parameters
#-------------------------------------------------------

Parameters:

  VPCCidrBlock:
    Type: String

  ProjectName:
    Type: String

  EnvironmentName:
    Type: String

  PublicSubNet1CIDR:
    Type: String

  PublicSubNet2CIDR:
    Type: String

  PrivateSubNet1CIDR:
    Type: String

  PrivateSubNet2CIDR:
    Type: String

  AutoScalingGroupMinSize:
    Type: String

  AutoScalingGroupMaxSize:
    Type: String


# ---------------------------------------
# Resource
#--------------------------------------- 


Resources:

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: UdacityS3ReadOnlyEC2
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "S3ReadOnlyAccess"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: "*"

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2
    DependsOn: UdacityS3ReadOnlyEC2


# ---------------------------------------
# Network
#--------------------------------------- 

  VPCWebApp:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  PrivateSubnet1WebApp:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubNet1CIDR
      VpcId: !Ref VPCWebApp
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  PrivateSubnet2WebApp:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubNet2CIDR
      VpcId: !Ref VPCWebApp
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  PublicSubnet1WebApp:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubNet1CIDR
      VpcId: !Ref VPCWebApp
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  PublicSubnet2WebApp:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubNet2CIDR
      VpcId: !Ref VPCWebApp
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName}

  InternetGatewayWebApp:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName} 

  AttachInternetGatewayVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGatewayWebApp
      VpcId: !Ref VPCWebApp

  NATGateway1EIPWebApp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: AttachInternetGatewayVPC

  NATGateway2EIPWebApp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: AttachInternetGatewayVPC

  NATGateway1WebApp:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1WebApp
      AllocationId: !GetAtt NATGateway1EIPWebApp.AllocationId
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName} 

  NATGateway2WebApp:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet2WebApp
      AllocationId: !GetAtt NATGateway2EIPWebApp.AllocationId
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName} 

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCWebApp
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName} 

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayWebApp
    DependsOn: AttachInternetGatewayVPC

  PublicRouteSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1WebApp

  PublicRouteSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2WebApp

  PrivateRouteTable1WebApp:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCWebApp
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName} 

  PrivateRouteSubnet1WebApp:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1WebApp
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1WebApp

  PrivateRouteSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1WebApp
      SubnetId: !Ref PrivateSubnet1WebApp

  PrivateRouteTable2WebApp:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCWebApp
      Tags: 
        - Key: ProjectName
          Value: !Sub ${ProjectName}
        - Key: EnvironmentName
          Value: !Sub ${EnvironmentName} 

  PrivateRouteSubnet2WebApp:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2WebApp
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2WebApp

  PrivateRouteSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2WebApp
      SubnetId: !Ref PrivateSubnet2WebApp

# ---------------------------------------
# Server
#--------------------------------------- 

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Application Security Group
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VPCWebApp

  WebAppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install -y unzip awscli nginx
            cd /var/www/html
            aws s3 cp s3://udacity-demo-1/udacity.zip .
            unzip -o udacity.zip
            rm -rf udacity.zip
      ImageId: "ami-005bdb005fb00e791"
      InstanceType: "t3.small"
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      SecurityGroups:
        - Ref: WebAppSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: 
        Ref: WebAppLaunchConfiguration
      VPCZoneIdentifier: 
        - !Ref PrivateSubnet1WebApp
        - !Ref PrivateSubnet2WebApp
      MinSize: !Sub ${AutoScalingGroupMinSize}
      MaxSize: !Sub ${AutoScalingGroupMaxSize}
      HealthCheckGracePeriod: 10
      TargetGroupARNs:
        - !Ref WebAppTargetGroup


# ---------------------------------------
# LoadBalancer
#--------------------------------------- 

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Security Group
      SecurityGroupEgress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VPCWebApp

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1WebApp
        - !Ref PublicSubnet2WebApp
      SecurityGroups: 
        - !Ref LoadBalancerSecurityGroup

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Port: 80
      Protocol: "HTTP"
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPCWebApp

  WebAppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: "HTTP"

  WebAppLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [ "/" ]
      ListenerArn: !Ref WebAppLoadBalancerListener
      Priority: 1

# ---------------------------------------
# Output
#--------------------------------------- 

Outputs:

  WebSiteAddress:
    Description: WebApp public address
    Value: !Join [ "://", [ "http", !GetAtt WebAppLoadBalancer.DNSName ] ]
    Export:
      Name: WebAppPublicAddress
