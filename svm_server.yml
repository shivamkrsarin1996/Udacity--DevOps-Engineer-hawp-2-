
Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  DestinationCidrBlock:
      Description: routing Role
      Type: String
      Default: 0.0.0.0/0

  FromPortIngress:
      Description: security group ingress from
      Type: String

  ToPortIngress:
      Description: security group ingress to
      Type: String

  CidrIpIngress:
      Description: security group ip
      Type: String

  FromPortEgress:
      Description: security group egress from
      Type: String

  ToPortEgress:
      Description: security group egree to
      Type: String

  CidrIpEgress:
      Description: security group ip egree
      Type: String


#=================================
# Resources
#===================================    
Resources:
 # create instance profile
  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - UdacityS3ReadOnlyEC2

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2020-05-15
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument:
        Version: 2020-05-15
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

    # security group for  load Balancer that we placed in our VPC

  LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our load balancer
        VpcId:
         Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref FromPortIngress  # from port 80 to port 80 allow all traffic
          ToPort: !Ref ToPortIngress
          CidrIp: !Ref CidrIpIngress
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: !Ref FromPortEgress
          ToPort: !Ref ToPortEgress
          CidrIp: !Ref CidrIpEgress
 
     # security group for web server that we placed in our VPC

  WebServerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId:
         Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref FromPortIngress
          ToPort: !Ref ToPortIngress
          CidrIp: !Ref CidrIpIngress
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-005bdb005fb00e791
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:      
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "Deploying we server using cloud formation by Sabreen Salama" > index.html
          aws s3 cp s3://udacit-cloudformation/udacity-starter-website.zip .
          unzip -o udacity-starter-website.zip


  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup


  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref Listener
        Priority: 1 

  WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 35
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 30
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId:
          Fn::ImportValue:
             Fn::Sub: "${EnvironmentName}-VPCID"

#===========================
#Output
#===========================
Outputs:
  WebAppLB:
    Description: A reference to the APP's URL Link
    Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName]]
    Export:
      Name: "URL:"

